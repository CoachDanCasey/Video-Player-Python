import sys
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout, Q, QSlider, QPushButton
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QImage, QPixmap

class MediaPlayer(QMainWindow):
    def __init__(self):
        super().__init__()

        self.media_path = ""
        self.cap = None
        self.frame = None
        self.annotation_text = ""
        self.annotation_color = (255, 0, 0)  # red
        self.annotation_thickness = 2
        self.annotation_font = cv2.FONT_HERSHEY_SIMPLEX
        self.annotation_scale = 1

        self.initUI()

    def initUI(self):
        self.setWindowTitle("Media Player")
        self.setGeometry(300, 300, 640, 480)

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.media_label = QLabel(self.central_widget)
        self.media_label.setAlignment(Qt.AlignCenter)

        self.play_button = QPushButton("Play", self.central_widget)
        self.play_button.clicked.connect(self.play)

        self.pause_button = QPushButton("Pause", self.central_widget)
        self.pause_button.clicked.connect(self.pause)

        self.stop_button = QPushButton("Stop", self.central_widget)
        self.stop_button.clicked.connect(self.stop)

        self.slider = QSlider(Qt.Horizontal, self.central_widget)
        self.slider.setRange(0, 0)
        self.slider.valueChanged.connect(self.sliderchanged)

        layout = QVBoxLayout()
        layout.addWidget(self.media_label)
        layout.addWidget(self.play_button)
        layout.addWidget(self.pause_button)
        layout.addWidget(self.stop_button)
        layout.addWidget(self.slider)
        self.central_widget.setLayout(layout)

    def play(self):
        if self.media_path:
            self.cap = cv2.VideoCapture(self.media_path)
            self.timer = QTimer()
            self.timer.timeout.connect(self.update_frame)
            self.timer.start(30)  # 30ms interval
        else:
            print("No media selected")

    def pause(self):
        if self.timer:
            self.timer.stop()

    def stop(self):
        if self.timer:
            self.timer.stop()
        self.cap.release()

    def update_frame(self):
        ret, self.frame = self.cap.read()
        if ret:
            self.process_frame()
            self.display_frame()
        else:
            self.stop()

    def process_frame(self):
        # Perform OCR to recognize text in the frame
        text = pytesseract.image_to_string(self.frame)
        # Add annotations to the frame
        cv2.putText(self.frame, text, (10, 30), self.annotation_font, self.annotation_scale, self.annotation_color, self.annotation_thickness)

    def display_frame(self):
        height, width, _ = self.frame.shape
        bytes_per_line = 3 * width
        q_image = QImage(self.frame.data, width, height, bytes_per_line, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(q_image)
        self.media_label.setPixmap(pixmap)

    def slider_changed(self):
        self.cap.set(cv2.CAP_PROP_POS_FRAMES, self.slider.value())

if __name__ == "__main__":
    app = QApplicationsys.argv)
    player = MediaPlayer()
    player.show()
    sys.exit(app.exec_())
